// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["a/Pi"], function(aPi) {
  var aFileList;
  return aFileList = (function(_super) {
    __extends(aFileList, _super);

    aFileList.prototype.r = null;

    aFileList.prototype.attr = function() {
      return aFileList.__super__.attr.apply(this, arguments).concat(["prefix", "row", "msg"]);
    };

    function aFileList() {
      var _this = this;
      aFileList.__super__.constructor.apply(this, arguments);
      this.sub("file/upload", function(ev, data) {
        return _this.onUpload(data.data);
      });
      this.sub("file/delete", function(ev, data) {
        return _this["delete"](ev, data);
      });
      this.sub("update", function(ev, data) {
        return _this.load(_this.timestamp());
      });
    }

    aFileList.prototype.timestamp = function() {
      return new Date().getTime();
    };

    aFileList.prototype["delete"] = function(ev, data) {
      var _this = this;
      return this.post(this.a.prefix + "/delete", data, function() {
        return _this.load();
      });
    };

    aFileList.prototype.init = function() {
      this.source = this.rt.source(this.a.row);
      return this.load();
    };

    aFileList.prototype.load = function(ts) {
      var _this = this;
      return this.post(this.a.prefix + "/list", this.data, function(r) {
        return _this.onData(r, ts);
      });
    };

    aFileList.prototype.onUpload = function(data) {
      this.e.append(this.source({
        o: data
      }));
      return this.rt.pi(this.e);
    };

    aFileList.prototype.onData = function(r, ts) {
      var i, row, _i, _len, _ref;
      this.r = r;
      this.e.empty();
      i = 0;
      _ref = r.rr;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        this.e.append(this.source({
          o: row,
          ts: ts,
          i: (i = i + 1)
        }));
      }
      return this.rt.pi(this.e);
    };

    return aFileList;

  })(aPi);
});
