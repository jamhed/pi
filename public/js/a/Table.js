// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["a/Pi"], function(aPi) {
  var aTable;
  return aTable = (function(_super) {
    __extends(aTable, _super);

    aTable.prototype.attr = function() {
      return aTable.__super__.attr.apply(this, arguments).concat(["prefix", "uri", "load", "update", "delete", "page"]);
    };

    function aTable() {
      this.filter = [];
      this.sorter = {};
      this.page = 0;
      aTable.__super__.constructor.apply(this, arguments);
    }

    aTable.prototype.init = function() {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8,
        _this = this;
      if ((_base = this.a).uri == null) {
        _base.uri = this.a.prefix + "/table";
      }
      if ((_base1 = this.a).edit == null) {
        _base1.edit = this.a.prefix + "/edit";
      }
      if ((_base2 = this.a).update == null) {
        _base2.update = this.a.prefix + "/update";
      }
      if ((_base3 = this.a)["delete"] == null) {
        _base3["delete"] = this.a.prefix + "/delete";
      }
      if ((_base4 = this.a).page == null) {
        _base4.page = this.a.prefix + "/page";
      }
      if ((_base5 = this.a).filter == null) {
        _base5.filter = this.a.prefix + "/filter";
      }
      if ((_base6 = this.a).order == null) {
        _base6.order = this.a.prefix + "/order";
      }
      if ((_base7 = this.a).left == null) {
        _base7.left = this.a.prefix + "/change/left";
      }
      if ((_base8 = this.a).right == null) {
        _base8.right = this.a.prefix + "/change/right";
      }
      this.page = this.fragmentGet(this.a.page);
      this.filter = JSON.parse(this.fragmentGet(this.a.filter) || "[]");
      this.sub("load", function(ev, args, caller) {
        return _this.load(args.args, args.onData);
      });
      this.sub("page", function(ev, args, caller) {
        _this.page = args;
        _this.fragmentSet(_this.a.page, parseInt(_this.page));
        return _this.load();
      });
      this.sub("filter/set", function(ev, args) {
        _this.filter = args.ev ? args.data.form : args;
        _this.fragmentSet(_this.a.filter, JSON.stringify(_this.filter));
        return _this.load();
      });
      this.sub("filter/get", function(ev, args) {
        var f, _i, _len, _ref, _results;
        if (!_this.filter[0]) {
          return;
        }
        _ref = _this.filter;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if (f.name === args.name) {
            _results.push(args.callback(f.value));
          }
        }
        return _results;
      });
      this.sub("filter/clear", function(ev, args) {
        _this.filter = [];
        _this.fragmentSet(_this.a.filter, _this.filter);
        return _this.load();
      });
      this.sub("edit", function(ev, args, caller) {
        return _this.post(_this.a.edit, args.args, function(r) {
          return args.onData(r);
        });
      });
      this.sub("save", function(ev, args, caller) {
        return _this.post(_this.a.update, args.data, function(r) {
          return _this.load();
        });
      });
      this.sub("delete", function(ev, args, caller) {
        return _this.post(_this.a["delete"], args, function(r) {
          return _this.load();
        });
      });
      this.sub("order", function(ev, args, caller) {
        args.page = _this.page;
        return _this.post(_this.a.order, args);
      });
      this.sub("order/left", function(ev, args, caller) {
        args.page = _this.page;
        return _this.post(_this.a.left, args);
      });
      this.sub("order/right", function(ev, args, caller) {
        args.page = _this.page;
        return _this.post(_this.a.right, args);
      });
      this.sub("content/check", function(ev, args) {
        if (_this.r) {
          return args.callback(_this.r);
        }
      });
      return this.load();
    };

    aTable.prototype.load = function(args, onData) {
      var _this = this;
      return this.post(this.a.uri, {
        filter: this.filter,
        sorter: this.sorter,
        page: this.page,
        args: args
      }, function(r) {
        _this.r = r;
        return _this.msg("content", r);
      });
    };

    return aTable;

  })(aPi);
});
